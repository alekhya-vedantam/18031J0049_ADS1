-------------------------------------------------------------------Activity 8----------------------------------------------------------------
Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a "*".
Example:
pairStar("hello")---->"hel*lo"
pairStar("xxyy") ----> "x*xy*y"
pairStar("aaaa") ----> "a*a*a*a".
Ans.
public class pairStar {
	
	static String pairStar(String str)
	{
	    if(str.length()==1||str.equals(""))
	        return str;
	    if(str.charAt(0)==str.charAt(1))
	        return str.charAt(0) + "*" + pairStar(str.substring(1));
	    
	    return str.charAt(0) + pairStar(str.substring(1));
	    
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s= pairStar("hello");
		System.out.println(s);
	}
}
--------------------------------------------------------------Activity 10-------------------------------------------------------------------------
public static int fibonacci(int number){ 
if(number == 1){ 
return 1; 
}
else if(number == 2){
	return 2;
} 
return fibonacci(number-1) + fibonacci(number -2); 

In above code for number = 5 check how many times the fibonacci function is called

-----8--------------------- 



In above code for number = 10 check how many times the fibonacci function is called

------72--------------------- 



public static int fibonacci(int number){
int fibValue=0;
if(number == 1 ){
return 1;
}else if(number == 2){
return 2;
}else if(fibArray[number]!=0){
return fibArray[number];
}else{
fibValue=fibonacci(number-1)+fibonacci(number-2);
fibArray[number]=fibValue;
return fibValue;
}
}
In above code for number = 5 check how many times the fibonacci function is called

--------------------------- 

In above code for number = 10 check how many times the fibonacci function is called

--------------------------- 
