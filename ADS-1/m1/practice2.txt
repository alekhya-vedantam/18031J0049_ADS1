import java.util.Scanner;
public class QuickFind 
{
	boolean value;
	private int[] id;
	 
	public QuickFind(int N)
	{
		id = new int[N];
		for (int i = 0; i < N; i++)
		{
			id[i] = i;
		}
	
	}
	 public boolean find(int p, int q)
	{ 
		 return id[p] == id[q];
	}
	 public void unite(int p, int q)
	{
		 int pid = id[p];
		 for (int i = 0; i < id.length; i++)
			 if (id[i] == pid)
			 {
				 id[i] = id[q];
			 }
	}
	 public void show()
	 {
		 for(int i=0;i<id.length;i++)
		 {
			 System.out.println("\t"+id[i]);
		 }
	 }
	 public static void main(String[] args)
	 {
		 int N;
		 System.out.println("Enter the size of the array:");
		 Scanner scan = new Scanner(System.in);
		 N=scan.nextInt();
		 QuickFind QF=new QuickFind(N);
		 QF.find(9,0);
		 QF.unite(9,0);
		 QF.show();
		 QF.find(3,4);
		 QF.unite(3,4);
		 QF.show();
		 QF.find(5,8);
		 QF.unite(5,8);
		 QF.show();
		 QF.find(7,2);
		 QF.unite(7,2);
		 QF.show();
		 QF.find(2,1);
		 QF.unite(2,1);
		 QF.show();
		 QF.find(5,7);
		 QF.unite(5,7);
		 QF.show();
		 QF.find(0,3);
		 QF.unite(0,3);
		 QF.show();
		 QF.find(4,2);
		 QF.unite(4,2);
		 QF.show();
	 }
}

import java.util.Scanner;
class Union
{
	private int[] id;
	
	public Union(int N)
	{
		id = new int[N];
		for (int i = 0; i < N; i++) 
		{
			id[i] = i;
		}
	}
	private int root(int i)
	{
		while (i != id[i]) i = id[i];
		return i;
	}
	public boolean find(int p, int q)
	{
		return root(p) == root(q);
	}
	public void unite(int p, int q)
	{
		int i = root(p);
		int j = root(q);
		id[i] = j;
	}
	public void show()
	{
		for(int i=0;i<id.length;i++)
		{
			System.out.println("\t"+id[i]);
		}
	}
}
class QuickUnion
{
	public static void main(String[] args)
	{
		int N;
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the size of array:");
		N=scan.nextInt();
		Union u = new Union(N);
		u.find(9,0);
		 u.unite(9,0);
		 u.show();
		 u.find(3,4);
		 u.unite(3,4);
		 u.show();
		 u.find(5,8);
		 u.unite(5,8);
		 u.show();
		 u.find(7,2);
		 u.unite(7,2);
		 u.show();
		 u.find(2,1);
		 u.unite(2,1);
		 u.show();
		 u.find(5,7);
		 u.unite(5,7);
		 u.show();
		 u.find(0,3);
		 u.unite(0,3);
		 u.show();
		 u.find(4,2);
		 u.unite(4,2);
		 u.show();
	}
}
